/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.klijent;

import domen.Korisnik;
import domen.Raspored;
import domen.Rezervacija;
import domen.Tretman;
import domen.Zaposleni;
import gui.modeltabele.DateLabelFormatter;
import gui.modeltabele.RasporedModelTabele;
import gui.modeltabele.RezervacijaModelTabele;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import poslovnalogika.Kontroler;

/**
 *
 * @author Megi
 */
public class FRezervacija extends javax.swing.JFrame {

    List<Raspored> listaRasporeda;
    List<Rezervacija> listaRezervacija;
    RasporedModelTabele rasporedModelTabele;
    RezervacijaModelTabele rezervacijaModelTabele;
    Rezervacija izvrsenaRezervacija;
    JDatePickerImpl datePicker;
    private List<Rezervacija> listaRezervacijaRef;

    /**
     * Creates new form FRezervacija
     */
    public FRezervacija() {
        try {
            initComponents();
            srediFormu();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblRezervacije = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jbtnRezervisi = new javax.swing.JButton();
        jbtnStampa = new javax.swing.JButton();
        jpnlDatum = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblRaspored = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtxtVreme = new javax.swing.JTextField();
        jbtnFilteri = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        errUnos = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rezervacija tretmana");

        jLabel1.setText("Tretmani koje vrše zaposleni:");

        jtblRezervacije.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblRezervacije);

        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("Radno vreme: 12-20h");

        jbtnRezervisi.setText("Rezerviši");
        jbtnRezervisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRezervisiActionPerformed(evt);
            }
        });

        jbtnStampa.setText("Odštampaj rezervaciju");
        jbtnStampa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStampaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnlDatumLayout = new javax.swing.GroupLayout(jpnlDatum);
        jpnlDatum.setLayout(jpnlDatumLayout);
        jpnlDatumLayout.setHorizontalGroup(
            jpnlDatumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
        );
        jpnlDatumLayout.setVerticalGroup(
            jpnlDatumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jtblRaspored.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtblRaspored);

        jLabel2.setText("Izaberite dan :");

        jLabel5.setText("Izaberite vreme(hh:mm)");

        jbtnFilteri.setText("Ukloni sve filtere");
        jbtnFilteri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnFilteriActionPerformed(evt);
            }
        });

        jButton1.setText("Izlaz");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        errUnos.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setText("Spisak zakazanih termina:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jpnlDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(167, 167, 167)
                                .addComponent(errUnos, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(194, 194, 194)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtxtVreme, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(50, 50, 50)
                                        .addComponent(jbtnRezervisi)
                                        .addGap(18, 18, 18)
                                        .addComponent(jbtnStampa)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jbtnFilteri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(172, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnlDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jtxtVreme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtnRezervisi)
                        .addComponent(jbtnStampa))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errUnos, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnFilteri))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(95, 95, 95)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(336, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnRezervisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRezervisiActionPerformed
        errUnos.setText("");
        jbtnStampa.setVisible(false);
        int red = jtblRaspored.getSelectedRow();
        if (red > -1) {
            Tretman tretman = ((Tretman) jtblRaspored.getModel().getValueAt(red, 0));
            Zaposleni zaposleni = ((Zaposleni) jtblRaspored.getModel().getValueAt(red, 1));
            java.util.Date dan = (java.util.Date) datePicker.getModel().getValue();
            if (dan != null) {
                String sVreme = jtxtVreme.getText().trim();
                if (!sVreme.equals("")) {
                    try {
                        Date vreme = Kontroler.getInstance().validirajVreme(sVreme);

                        Calendar c1 = new GregorianCalendar();
                        c1.setTime(dan);
                        Calendar c2 = new GregorianCalendar();
                        c2.setTime(vreme);
                        System.out.println(c1.get(GregorianCalendar.YEAR));
                        Date zakazanoVreme = new Date(c1.get(GregorianCalendar.YEAR)-1900, c1.get(GregorianCalendar.MONTH),
                                c1.get(GregorianCalendar.DAY_OF_MONTH), c2.get(GregorianCalendar.HOUR_OF_DAY), c2.get(GregorianCalendar.MINUTE));
                      

                        Calendar c3 = new GregorianCalendar();
                        c3.setTime(Kontroler.getInstance().validirajVreme("12:00"));

                        Date pocetakRadnogVremena = new Date(c1.get(GregorianCalendar.YEAR)-1900, c1.get(GregorianCalendar.MONTH),
                                c1.get(GregorianCalendar.DAY_OF_MONTH), c3.get(GregorianCalendar.HOUR_OF_DAY), c3.get(GregorianCalendar.MINUTE));

                        Calendar c4 = new GregorianCalendar();
                        c4.setTime(Kontroler.getInstance().validirajVreme("20:00"));

                        Date krajRadnogVremena = new Date(c1.get(GregorianCalendar.YEAR)-1900, c1.get(GregorianCalendar.MONTH),
                                c1.get(GregorianCalendar.DAY_OF_MONTH), c4.get(GregorianCalendar.HOUR_OF_DAY), c4.get(GregorianCalendar.MINUTE));

                        if (zakazanoVreme.before(pocetakRadnogVremena) || zakazanoVreme.after(krajRadnogVremena)) {
                            throw new Exception("Morate izabrati vreme u okviru našeg radnog vremena!");
                        }
                        Korisnik klijent = ((Korisnik) Kontroler.getInstance().getAktivniKlijent());
                        izvrsenaRezervacija = new Rezervacija(klijent, tretman, zaposleni, zakazanoVreme);
                        Kontroler.getInstance().dodajRezervaciju(izvrsenaRezervacija);

                        osveziTabeluRezervacija();

                        JOptionPane.showMessageDialog(this, "Sistem je zapamtio rezervaciju");
                        jbtnStampa.setVisible(true);
                    } catch (Exception ex) {
                        Logger.getLogger(FRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                        errUnos.setText(ex.getMessage());
                        JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti rezervaciju ", "Greska",
                                JOptionPane.ERROR_MESSAGE);

                    }
                    try {
                        List<Rezervacija> lr = Kontroler.getInstance().vratiSveRezervacije();
                        jtblRezervacije.setModel(new RezervacijaModelTabele(lr));
                        jtblRezervacije.repaint();
                    } catch (Exception ex) {
                        Logger.getLogger(FRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jtxtVreme.setText("");
                    datePicker.repaint();
                } else {
                    errUnos.setText("Morate uneti vreme!");

                }
            } else {
                errUnos.setText("Morate izabrati dan!");
            }

        } else {
            errUnos.setText("Morate izabrati tretman i zaposlenog!");
        }
    }//GEN-LAST:event_jbtnRezervisiActionPerformed

    private void jbtnStampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStampaActionPerformed
        try {
            if (izvrsenaRezervacija != null) {
                Kontroler.getInstance().stampajPDF(izvrsenaRezervacija);
                JOptionPane.showMessageDialog(this, "Generisan je PDF!");
            } else {
                throw new Exception("Niste izvrsili rezervaciju!");
            }
            jbtnStampa.setVisible(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtnStampaActionPerformed

    private void jbtnFilteriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnFilteriActionPerformed
        osveziTabeluRezervacija();

    }//GEN-LAST:event_jbtnFilteriActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRezervacija().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errUnos;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnFilteri;
    private javax.swing.JButton jbtnRezervisi;
    private javax.swing.JButton jbtnStampa;
    private javax.swing.JPanel jpnlDatum;
    private javax.swing.JTable jtblRaspored;
    private javax.swing.JTable jtblRezervacije;
    private javax.swing.JTextField jtxtVreme;
    // End of variables declaration//GEN-END:variables

    private void srediFormu() throws ClassNotFoundException, SQLException, IOException, Exception {
        try {
            errUnos.setText("");
            jbtnStampa.setVisible(false);
            listaRasporeda = Kontroler.getInstance().vratiSveRasporede();
            if (listaRasporeda == null) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da pronađe nijedan tretman", "Greska",
                        JOptionPane.ERROR_MESSAGE);
            }
            rasporedModelTabele = new RasporedModelTabele(listaRasporeda);
            jtblRaspored.setModel(rasporedModelTabele);

            listaRezervacijaRef = Kontroler.getInstance().vratiSveRezervacije();
            listaRezervacija = new ArrayList<Rezervacija>(listaRezervacijaRef);
            jtblRezervacije.setModel(new RezervacijaModelTabele(listaRezervacija));

            UtilDateModel model = new UtilDateModel();
            Properties p = new Properties();
            p.put("text.today", "Today");
            p.put("text.month", "Month");
            p.put("text.year", "Year");
            JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
            datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());
            datePicker.setVisible(true);

            jpnlDatum.setLayout(new BorderLayout());

            jpnlDatum.add(datePicker, BorderLayout.CENTER);

            datePicker.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if ((java.util.Date) datePicker.getModel().getValue() == null) {
                            jtblRezervacije.setModel(new RezervacijaModelTabele(listaRezervacijaRef));
                        }
                        GregorianCalendar dan = new GregorianCalendar();
                        dan.setTime((java.util.Date) datePicker.getModel().getValue());
                        List<Rezervacija> lr = Kontroler.getInstance().vratiSveRezervacijeDana(dan);
                        listaRezervacija = ((RezervacijaModelTabele) jtblRezervacije.getModel()).vratiListu();
                        List<Rezervacija> novaLista = new ArrayList<>();
                        //presek 
                        for (int i = 0; i < lr.size(); i++) {
                            Rezervacija r1 = lr.get(i);
                            for (int j = 0; j < listaRezervacija.size(); j++) {
                                Rezervacija r2 = listaRezervacija.get(j);
                                if (r1.equals(r2)) {
                                    novaLista.add(r2);
                                }
                            }
                        }

                        jtblRezervacije.setModel(new RezervacijaModelTabele(novaLista));
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(datePicker.getParent().getParent(), "Nema rezervacija za traženi dan", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            });

            jtblRaspored.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent event) {
                    if (jtblRaspored.getSelectedRow() > -1) {

                        try {
                            Raspored r = ((RasporedModelTabele) jtblRaspored.getModel()).vratiListu().get(jtblRaspored.getSelectedRow());
                            listaRezervacija = ((RezervacijaModelTabele) jtblRezervacije.getModel()).vratiListu();
                            List<Rezervacija> novaLista = new ArrayList<>();
                            for (int i = 0; i < listaRezervacija.size(); i++) {
                                Rezervacija rez = listaRezervacija.get(i);
                                if ((rez.getTretman().equals(r.getTretman()) && rez.getZaposleni().equals(r.getZaposleni()))) {
                                    novaLista.add(rez);
                                }
                            }

                            jtblRezervacije.setModel(new RezervacijaModelTabele(novaLista));
                        } catch (Exception ex) {
                            Logger.getLogger(FRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
            });

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void osveziTabeluRezervacija() {
        try {
            listaRezervacija = Kontroler.getInstance().vratiSveRezervacije();
            jtblRezervacije.setModel(new RezervacijaModelTabele(listaRezervacija));
        } catch (Exception ex) {
            Logger.getLogger(FRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
